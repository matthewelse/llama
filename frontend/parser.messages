program: With
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type With
##
## Ends in an error in state: 1.
##
## structure_item -> Type . option(type_vars) Ident Equal type_shape [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen With
##
## Ends in an error in state: 3.
##
## option(type_vars) -> Lparen . separated_nonempty_list(Comma,located(Type_var)) Rparen [ Ident ]
##
## The known suffix of the stack is as follows:
## Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var With
##
## Ends in an error in state: 4.
##
## separated_nonempty_list(Comma,located(Type_var)) -> Type_var . [ Rparen Ident ]
## separated_nonempty_list(Comma,located(Type_var)) -> Type_var . Comma separated_nonempty_list(Comma,located(Type_var)) [ Rparen Ident ]
##
## The known suffix of the stack is as follows:
## Type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var Comma With
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(Comma,located(Type_var)) -> Type_var Comma . separated_nonempty_list(Comma,located(Type_var)) [ Rparen Ident ]
##
## The known suffix of the stack is as follows:
## Type_var Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var Ident
##
## Ends in an error in state: 7.
##
## option(type_vars) -> Lparen separated_nonempty_list(Comma,located(Type_var)) . Rparen [ Ident ]
##
## The known suffix of the stack is as follows:
## Lparen separated_nonempty_list(Comma,located(Type_var))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(Comma,located(Type_var)) -> Type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Type_var With
##
## Ends in an error in state: 9.
##
## structure_item -> Type option(type_vars) . Ident Equal type_shape [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Type option(type_vars)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident With
##
## Ends in an error in state: 10.
##
## structure_item -> Type option(type_vars) Ident . Equal type_shape [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Type option(type_vars) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal With
##
## Ends in an error in state: 11.
##
## structure_item -> Type option(type_vars) Ident Equal . type_shape [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Type option(type_vars) Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace With
##
## Ends in an error in state: 13.
##
## type_shape -> Lbrace . separated_nonempty_list(Semicolon,record_field_declaration) Rbrace [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Lbrace
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace Ident With
##
## Ends in an error in state: 14.
##
## record_field_declaration -> Ident . Colon type_ [ Semicolon Rbrace ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace Ident Colon With
##
## Ends in an error in state: 15.
##
## record_field_declaration -> Ident Colon . type_ [ Semicolon Rbrace ]
##
## The known suffix of the stack is as follows:
## Ident Colon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen With
##
## Ends in an error in state: 17.
##
## base_type -> Lparen . type_ Rparen [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Ident Equal Eof End Comma Class ]
## type_ -> Lparen . loption(separated_nonempty_list(Comma,type_)) Rparen [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
## type_ -> Lparen . loption(separated_nonempty_list(Comma,type_)) Rparen Arrow type_ [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
## type_ -> Lparen . separated_nonempty_list(Comma,type_) Rparen Ident [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen Ident Val
##
## Ends in an error in state: 19.
##
## base_type -> Lparen type_ . Rparen [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Ident Equal Eof End Comma Class ]
## separated_nonempty_list(Comma,type_) -> type_ . [ Rparen ]
## separated_nonempty_list(Comma,type_) -> type_ . Comma separated_nonempty_list(Comma,type_) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Lparen type_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production type_ -> base_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen Ident Comma With
##
## Ends in an error in state: 21.
##
## separated_nonempty_list(Comma,type_) -> type_ Comma . separated_nonempty_list(Comma,type_) [ Rparen ]
##
## The known suffix of the stack is as follows:
## type_ Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen Ident Comma Ident Val
##
## Ends in an error in state: 22.
##
## separated_nonempty_list(Comma,type_) -> type_ . [ Rparen ]
## separated_nonempty_list(Comma,type_) -> type_ . Comma separated_nonempty_list(Comma,type_) [ Rparen ]
##
## The known suffix of the stack is as follows:
## type_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production type_ -> base_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Ident With
##
## Ends in an error in state: 24.
##
## type_ -> base_type . Ident [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
## type_ -> base_type . [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
##
## The known suffix of the stack is as follows:
## base_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen Ident Comma Ident Rparen With
##
## Ends in an error in state: 27.
##
## type_ -> Lparen separated_nonempty_list(Comma,type_) Rparen . Ident [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen separated_nonempty_list(Comma,type_) Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen Rparen With
##
## Ends in an error in state: 30.
##
## type_ -> Lparen loption(separated_nonempty_list(Comma,type_)) Rparen . [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
## type_ -> Lparen loption(separated_nonempty_list(Comma,type_)) Rparen . Arrow type_ [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen loption(separated_nonempty_list(Comma,type_)) Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Lparen Rparen Arrow With
##
## Ends in an error in state: 31.
##
## type_ -> Lparen loption(separated_nonempty_list(Comma,type_)) Rparen Arrow . type_ [ Val Type Semicolon Rparen Rbrace Pipe Let Intrinsic Impl Equal Eof End Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen loption(separated_nonempty_list(Comma,type_)) Rparen Arrow
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace Ident Colon Ident Val
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(Semicolon,record_field_declaration) -> record_field_declaration . [ Rbrace ]
## separated_nonempty_list(Semicolon,record_field_declaration) -> record_field_declaration . Semicolon separated_nonempty_list(Semicolon,record_field_declaration) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## record_field_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production type_ -> base_type
## In state 33, spurious reduction of production record_field_declaration -> Ident Colon type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace Ident Colon Ident Semicolon With
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(Semicolon,record_field_declaration) -> record_field_declaration Semicolon . separated_nonempty_list(Semicolon,record_field_declaration) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## record_field_declaration Semicolon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Pipe With
##
## Ends in an error in state: 40.
##
## constructor_declarations -> option(Pipe) . loption(separated_nonempty_list(Pipe,constructor_declaration)) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## option(Pipe)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor With
##
## Ends in an error in state: 41.
##
## constructor_declaration -> Constructor . Of type_ [ Type Pipe Let Intrinsic Impl Eof Class ]
## constructor_declaration -> Constructor . [ Type Pipe Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor Of With
##
## Ends in an error in state: 42.
##
## constructor_declaration -> Constructor Of . type_ [ Type Pipe Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Constructor Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor Of Ident Val
##
## Ends in an error in state: 46.
##
## separated_nonempty_list(Pipe,constructor_declaration) -> constructor_declaration . [ Type Let Intrinsic Impl Eof Class ]
## separated_nonempty_list(Pipe,constructor_declaration) -> constructor_declaration . Pipe separated_nonempty_list(Pipe,constructor_declaration) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## constructor_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production type_ -> base_type
## In state 43, spurious reduction of production constructor_declaration -> Constructor Of type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor Pipe With
##
## Ends in an error in state: 47.
##
## separated_nonempty_list(Pipe,constructor_declaration) -> constructor_declaration Pipe . separated_nonempty_list(Pipe,constructor_declaration) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## constructor_declaration Pipe
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let With
##
## Ends in an error in state: 50.
##
## structure_item -> Let . Ident Equal expression option(DoubleSemicolon) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident With
##
## Ends in an error in state: 51.
##
## structure_item -> Let Ident . Equal expression option(DoubleSemicolon) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Let Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal With
##
## Ends in an error in state: 52.
##
## structure_item -> Let Ident Equal . expression option(DoubleSemicolon) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match With
##
## Ends in an error in state: 54.
##
## one_expression -> Match . expression With option(Pipe) separated_nonempty_list(Pipe,match_case) [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lparen With
##
## Ends in an error in state: 55.
##
## one_expression -> Lparen . expression Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
## one_expression -> Lparen . Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
## one_expression -> Lparen . expression Comma separated_nonempty_list(Comma,expression) Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let With
##
## Ends in an error in state: 57.
##
## one_expression -> Let . Ident Equal expression In expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident With
##
## Ends in an error in state: 58.
##
## one_expression -> Let Ident . Equal expression In expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Let Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident Equal With
##
## Ends in an error in state: 59.
##
## one_expression -> Let Ident Equal . expression In expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace With
##
## Ends in an error in state: 60.
##
## one_expression -> Lbrace . separated_nonempty_list(Semicolon,expr_record_field) Rbrace [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Lbrace
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident With
##
## Ends in an error in state: 61.
##
## expr_record_field -> Ident . Equal expression [ Semicolon Rbrace ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident Equal With
##
## Ends in an error in state: 62.
##
## expr_record_field -> Ident Equal . expression [ Semicolon Rbrace ]
##
## The known suffix of the stack is as follows:
## Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident While
##
## Ends in an error in state: 64.
##
## one_expression -> Ident . [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
## one_expression -> Ident . Lparen loption(separated_nonempty_list(Comma,expression)) Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident Lparen With
##
## Ends in an error in state: 65.
##
## one_expression -> Ident Lparen . loption(separated_nonempty_list(Comma,expression)) Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Ident Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun With
##
## Ends in an error in state: 66.
##
## one_expression -> Fun . Lparen loption(separated_nonempty_list(Comma,ident)) Rparen Arrow expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen With
##
## Ends in an error in state: 67.
##
## one_expression -> Fun Lparen . loption(separated_nonempty_list(Comma,ident)) Rparen Arrow expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Fun Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Ident With
##
## Ends in an error in state: 68.
##
## separated_nonempty_list(Comma,ident) -> Ident . [ Rparen ]
## separated_nonempty_list(Comma,ident) -> Ident . Comma separated_nonempty_list(Comma,ident) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Ident Comma With
##
## Ends in an error in state: 69.
##
## separated_nonempty_list(Comma,ident) -> Ident Comma . separated_nonempty_list(Comma,ident) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Ident Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Rparen With
##
## Ends in an error in state: 73.
##
## one_expression -> Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen . Arrow expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Rparen Arrow With
##
## Ends in an error in state: 74.
##
## one_expression -> Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen Arrow . expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen Arrow
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Constructor While
##
## Ends in an error in state: 75.
##
## one_expression -> Constructor . expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
## one_expression -> Constructor . [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident Lparen Int While
##
## Ends in an error in state: 82.
##
## separated_nonempty_list(Comma,expression) -> expression . [ Rparen ]
## separated_nonempty_list(Comma,expression) -> expression . Comma separated_nonempty_list(Comma,expression) [ Rparen ]
##
## The known suffix of the stack is as follows:
## expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident Lparen Constructor Comma With
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(Comma,expression) -> expression Comma . separated_nonempty_list(Comma,expression) [ Rparen ]
##
## The known suffix of the stack is as follows:
## expression Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident Equal Int While
##
## Ends in an error in state: 88.
##
## separated_nonempty_list(Semicolon,expr_record_field) -> expr_record_field . [ Rbrace ]
## separated_nonempty_list(Semicolon,expr_record_field) -> expr_record_field . Semicolon separated_nonempty_list(Semicolon,expr_record_field) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## expr_record_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident Equal Constructor Semicolon With
##
## Ends in an error in state: 89.
##
## separated_nonempty_list(Semicolon,expr_record_field) -> expr_record_field Semicolon . separated_nonempty_list(Semicolon,expr_record_field) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## expr_record_field Semicolon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident Equal Int While
##
## Ends in an error in state: 91.
##
## one_expression -> Let Ident Equal expression . In expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident Equal Constructor In With
##
## Ends in an error in state: 92.
##
## one_expression -> Let Ident Equal expression In . expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression In
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lparen Int While
##
## Ends in an error in state: 94.
##
## one_expression -> Lparen expression . Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
## one_expression -> Lparen expression . Comma separated_nonempty_list(Comma,expression) Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lparen Constructor Comma With
##
## Ends in an error in state: 96.
##
## one_expression -> Lparen expression Comma . separated_nonempty_list(Comma,expression) Rparen [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Lparen expression Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Int While
##
## Ends in an error in state: 99.
##
## one_expression -> Match expression . With option(Pipe) separated_nonempty_list(Pipe,match_case) [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Match expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With With
##
## Ends in an error in state: 100.
##
## one_expression -> Match expression With . option(Pipe) separated_nonempty_list(Pipe,match_case) [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Match expression With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Pipe With
##
## Ends in an error in state: 101.
##
## one_expression -> Match expression With option(Pipe) . separated_nonempty_list(Pipe,match_case) [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## Match expression With option(Pipe)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen With
##
## Ends in an error in state: 102.
##
## pattern -> Lparen . pattern Rparen [ Rparen Comma Arrow ]
## pattern -> Lparen . pattern Comma separated_nonempty_list(Comma,pattern) Rparen [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor With
##
## Ends in an error in state: 104.
##
## pattern -> Constructor . pattern [ Rparen Comma Arrow ]
## pattern -> Constructor . [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Ident With
##
## Ends in an error in state: 106.
##
## pattern -> Lparen pattern . Rparen [ Rparen Comma Arrow ]
## pattern -> Lparen pattern . Comma separated_nonempty_list(Comma,pattern) Rparen [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Constructor Comma With
##
## Ends in an error in state: 108.
##
## pattern -> Lparen pattern Comma . separated_nonempty_list(Comma,pattern) Rparen [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen pattern Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Constructor Comma Ident With
##
## Ends in an error in state: 111.
##
## separated_nonempty_list(Comma,pattern) -> pattern . [ Rparen ]
## separated_nonempty_list(Comma,pattern) -> pattern . Comma separated_nonempty_list(Comma,pattern) [ Rparen ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Constructor Comma Constructor Comma With
##
## Ends in an error in state: 112.
##
## separated_nonempty_list(Comma,pattern) -> pattern Comma . separated_nonempty_list(Comma,pattern) [ Rparen ]
##
## The known suffix of the stack is as follows:
## pattern Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Ident With
##
## Ends in an error in state: 115.
##
## match_case -> pattern . Arrow expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor Arrow With
##
## Ends in an error in state: 116.
##
## match_case -> pattern Arrow . expression [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## pattern Arrow
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor Arrow Int While
##
## Ends in an error in state: 118.
##
## separated_nonempty_list(Pipe,match_case) -> match_case . [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
## separated_nonempty_list(Pipe,match_case) -> match_case . Pipe separated_nonempty_list(Pipe,match_case) [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## match_case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor Arrow Constructor Pipe With
##
## Ends in an error in state: 119.
##
## separated_nonempty_list(Pipe,match_case) -> match_case Pipe . separated_nonempty_list(Pipe,match_case) [ With Type Semicolon Rparen Rbrace Pipe Let Intrinsic In Impl Eof End DoubleSemicolon Comma Class ]
##
## The known suffix of the stack is as follows:
## match_case Pipe
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Int While
##
## Ends in an error in state: 121.
##
## structure_item -> Let Ident Equal expression . option(DoubleSemicolon) [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic With
##
## Ends in an error in state: 124.
##
## intrinsic_declaration -> Intrinsic . Ident Colon type_ Equal String [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Intrinsic
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident With
##
## Ends in an error in state: 125.
##
## intrinsic_declaration -> Intrinsic Ident . Colon type_ Equal String [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon With
##
## Ends in an error in state: 126.
##
## intrinsic_declaration -> Intrinsic Ident Colon . type_ Equal String [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident Colon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Ident Val
##
## Ends in an error in state: 127.
##
## intrinsic_declaration -> Intrinsic Ident Colon type_ . Equal String [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident Colon type_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production type_ -> base_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Ident Equal With
##
## Ends in an error in state: 128.
##
## intrinsic_declaration -> Intrinsic Ident Colon type_ Equal . String [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident Colon type_ Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl With
##
## Ends in an error in state: 130.
##
## type_class_implementation -> Impl . type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor With
##
## Ends in an error in state: 132.
##
## type_class_implementation -> Impl type_class_name . Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen With
##
## Ends in an error in state: 133.
##
## type_class_implementation -> Impl type_class_name Lparen . loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Type_var Rparen
##
## Ends in an error in state: 135.
##
## type_class_implementation -> Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) . Ident Rparen option(where_clause) Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(Comma,located(Type_var)) -> Type_var
## In state 134, spurious reduction of production loption(separated_nonempty_list(Comma,located(Type_var))) -> separated_nonempty_list(Comma,located(Type_var))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident With
##
## Ends in an error in state: 136.
##
## type_class_implementation -> Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident . Rparen option(where_clause) Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen With
##
## Ends in an error in state: 137.
##
## type_class_implementation -> Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen . option(where_clause) Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where With
##
## Ends in an error in state: 138.
##
## where_clause -> Where . loption(separated_nonempty_list(Comma,type_constraint)) [ Equal Colon ]
##
## The known suffix of the stack is as follows:
## Where
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where Constructor Lparen Type_var Rparen With
##
## Ends in an error in state: 139.
##
## separated_nonempty_list(Comma,type_constraint) -> type_constraint . [ Equal Colon ]
## separated_nonempty_list(Comma,type_constraint) -> type_constraint . Comma separated_nonempty_list(Comma,type_constraint) [ Equal Colon ]
##
## The known suffix of the stack is as follows:
## type_constraint
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where Constructor Lparen Type_var Rparen Comma With
##
## Ends in an error in state: 140.
##
## separated_nonempty_list(Comma,type_constraint) -> type_constraint Comma . separated_nonempty_list(Comma,type_constraint) [ Equal Colon ]
##
## The known suffix of the stack is as follows:
## type_constraint Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where Constructor With
##
## Ends in an error in state: 141.
##
## type_constraint -> type_class_name . Lparen Type_var Rparen [ Equal Comma Colon ]
##
## The known suffix of the stack is as follows:
## type_class_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where Constructor Lparen With
##
## Ends in an error in state: 142.
##
## type_constraint -> type_class_name Lparen . Type_var Rparen [ Equal Comma Colon ]
##
## The known suffix of the stack is as follows:
## type_class_name Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where Constructor Lparen Type_var With
##
## Ends in an error in state: 143.
##
## type_constraint -> type_class_name Lparen Type_var . Rparen [ Equal Comma Colon ]
##
## The known suffix of the stack is as follows:
## type_class_name Lparen Type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Where Colon
##
## Ends in an error in state: 149.
##
## type_class_implementation -> Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) . Equal Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production loption(separated_nonempty_list(Comma,type_constraint)) ->
## In state 147, spurious reduction of production where_clause -> Where loption(separated_nonempty_list(Comma,type_constraint))
## In state 148, spurious reduction of production option(where_clause) -> where_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal With
##
## Ends in an error in state: 150.
##
## type_class_implementation -> Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal . Struct list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal Struct With
##
## Ends in an error in state: 151.
##
## type_class_implementation -> Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal Struct . list(type_class_impl) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Impl type_class_name Lparen loption(separated_nonempty_list(Comma,located(Type_var))) Ident Rparen option(where_clause) Equal Struct
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal Struct Let With
##
## Ends in an error in state: 152.
##
## type_class_impl -> Let . Ident Equal expression option(DoubleSemicolon) [ Let End ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal Struct Let Ident With
##
## Ends in an error in state: 153.
##
## type_class_impl -> Let Ident . Equal expression option(DoubleSemicolon) [ Let End ]
##
## The known suffix of the stack is as follows:
## Let Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal Struct Let Ident Equal With
##
## Ends in an error in state: 154.
##
## type_class_impl -> Let Ident Equal . expression option(DoubleSemicolon) [ Let End ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal Struct Let Ident Equal Int While
##
## Ends in an error in state: 155.
##
## type_class_impl -> Let Ident Equal expression . option(DoubleSemicolon) [ Let End ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Impl Constructor Lparen Ident Rparen Equal Struct Let Ident Equal Constructor DoubleSemicolon With
##
## Ends in an error in state: 157.
##
## list(type_class_impl) -> type_class_impl . list(type_class_impl) [ End ]
##
## The known suffix of the stack is as follows:
## type_class_impl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class With
##
## Ends in an error in state: 161.
##
## type_class_declaration -> Class . type_class_name Lparen Type_var Rparen option(where_clause) Colon Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor With
##
## Ends in an error in state: 162.
##
## type_class_declaration -> Class type_class_name . Lparen Type_var Rparen option(where_clause) Colon Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen With
##
## Ends in an error in state: 163.
##
## type_class_declaration -> Class type_class_name Lparen . Type_var Rparen option(where_clause) Colon Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var With
##
## Ends in an error in state: 164.
##
## type_class_declaration -> Class type_class_name Lparen Type_var . Rparen option(where_clause) Colon Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name Lparen Type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen With
##
## Ends in an error in state: 165.
##
## type_class_declaration -> Class type_class_name Lparen Type_var Rparen . option(where_clause) Colon Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name Lparen Type_var Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Where Equal
##
## Ends in an error in state: 166.
##
## type_class_declaration -> Class type_class_name Lparen Type_var Rparen option(where_clause) . Colon Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name Lparen Type_var Rparen option(where_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production loption(separated_nonempty_list(Comma,type_constraint)) ->
## In state 147, spurious reduction of production where_clause -> Where loption(separated_nonempty_list(Comma,type_constraint))
## In state 148, spurious reduction of production option(where_clause) -> where_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Colon With
##
## Ends in an error in state: 167.
##
## type_class_declaration -> Class type_class_name Lparen Type_var Rparen option(where_clause) Colon . Sig list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name Lparen Type_var Rparen option(where_clause) Colon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Colon Sig With
##
## Ends in an error in state: 168.
##
## type_class_declaration -> Class type_class_name Lparen Type_var Rparen option(where_clause) Colon Sig . list(type_class_sig) End [ Type Let Intrinsic Impl Eof Class ]
##
## The known suffix of the stack is as follows:
## Class type_class_name Lparen Type_var Rparen option(where_clause) Colon Sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Colon Sig Val With
##
## Ends in an error in state: 169.
##
## type_class_sig -> Val . Ident Colon type_ [ Val End ]
##
## The known suffix of the stack is as follows:
## Val
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Colon Sig Val Ident With
##
## Ends in an error in state: 170.
##
## type_class_sig -> Val Ident . Colon type_ [ Val End ]
##
## The known suffix of the stack is as follows:
## Val Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Colon Sig Val Ident Colon With
##
## Ends in an error in state: 171.
##
## type_class_sig -> Val Ident Colon . type_ [ Val End ]
##
## The known suffix of the stack is as follows:
## Val Ident Colon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Class Constructor Lparen Type_var Rparen Colon Sig Val Ident Colon Ident Type
##
## Ends in an error in state: 173.
##
## list(type_class_sig) -> type_class_sig . list(type_class_sig) [ End ]
##
## The known suffix of the stack is as follows:
## type_class_sig
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production type_ -> base_type
## In state 172, spurious reduction of production type_class_sig -> Val Ident Colon type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Constructor DoubleSemicolon With
##
## Ends in an error in state: 179.
##
## list(structure_item) -> structure_item . list(structure_item) [ Eof ]
##
## The known suffix of the stack is as follows:
## structure_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

