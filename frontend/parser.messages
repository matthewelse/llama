program: While
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expected `type`, `let` or `intrinsic`.

program: Type While
##
## Ends in an error in state: 1.
##
## structure_item -> Type . Ident Equal type_desc [ Type Let Intrinsic Eof ]
## structure_item -> Type . Type_var Ident Equal type_desc [ Type Let Intrinsic Eof ]
## structure_item -> Type . Lparen separated_nonempty_list(Comma,Type_var) Rparen Ident Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type
##

Expected type variables or a type name.

program: Type Type_var While
##
## Ends in an error in state: 2.
##
## structure_item -> Type Type_var . Ident Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Type_var
##

Expected a type name.

program: Type Type_var Ident While
##
## Ends in an error in state: 3.
##
## structure_item -> Type Type_var Ident . Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Type_var Ident
##

Expected `=`.

program: Type Type_var Ident Equal While
##
## Ends in an error in state: 4.
##
## structure_item -> Type Type_var Ident Equal . type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Type_var Ident Equal
##

Expected a record or a variant type declaration.

program: Type Ident Equal Lbrace While
##
## Ends in an error in state: 7.
##
## type_desc -> Lbrace . separated_nonempty_list(Semicolon,record_field) Rbrace [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Lbrace
##

Expected a record field name.

program: Type Ident Equal Lbrace Ident While
##
## Ends in an error in state: 8.
##
## record_field -> Ident . Colon type_ [ Semicolon Rbrace ]
##
## The known suffix of the stack is as follows:
## Ident
##

Expected `:`.

program: Type Ident Equal Lbrace Ident Colon While
##
## Ends in an error in state: 9.
##
## record_field -> Ident Colon . type_ [ Semicolon Rbrace ]
##
## The known suffix of the stack is as follows:
## Ident Colon
##

Expected a type.

program: Intrinsic Ident Colon Lparen While
##
## Ends in an error in state: 12.
##
## base_type -> Lparen . type_ Rparen [ Type Star Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen
##

Expected a type.

program: Intrinsic Ident Colon Lparen Ident Type
##
## Ends in an error in state: 14.
##
## base_type -> Lparen type_ . Rparen [ Type Star Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen type_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production inter_type -> base_type
## In state 16, spurious reduction of production type_ -> inter_type
##

Expected a type.

program: Intrinsic Ident Colon Ident While
##
## Ends in an error in state: 19.
##
## inter_type -> base_type . Star inter_type [ Type Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
## inter_type -> base_type . [ Type Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
##
## The known suffix of the stack is as follows:
## base_type
##

Expected a type.

program: Intrinsic Ident While
##
## Ends in an error in state: 126.
##
## intrinsic_declaration -> Intrinsic Ident . Colon type_ Equal String [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident
##

Expected `:`.

program: Intrinsic Ident Colon Ident Arrow While
##
## Ends in an error in state: 17.
##
## type_ -> inter_type Arrow . type_ [ Type Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof ]
##
## The known suffix of the stack is as follows:
## inter_type Arrow
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace Ident Colon Ident Type
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(Semicolon,record_field) -> record_field . [ Rbrace ]
## separated_nonempty_list(Semicolon,record_field) -> record_field . Semicolon separated_nonempty_list(Semicolon,record_field) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## record_field
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production inter_type -> base_type
## In state 16, spurious reduction of production type_ -> inter_type
## In state 22, spurious reduction of production record_field -> Ident Colon type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Lbrace Ident Colon Ident Semicolon While
##
## Ends in an error in state: 26.
##
## separated_nonempty_list(Semicolon,record_field) -> record_field Semicolon . separated_nonempty_list(Semicolon,record_field) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## record_field Semicolon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Pipe While
##
## Ends in an error in state: 31.
##
## variant -> option(Pipe) . loption(separated_nonempty_list(Pipe,constructor)) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## option(Pipe)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor While
##
## Ends in an error in state: 32.
##
## constructor -> Constructor . Of type_ [ Type Pipe Let Intrinsic Eof ]
## constructor -> Constructor . [ Type Pipe Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor Of While
##
## Ends in an error in state: 33.
##
## constructor -> Constructor Of . type_ [ Type Pipe Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Constructor Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor Of Ident Semicolon
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(Pipe,constructor) -> constructor . [ Type Let Intrinsic Eof ]
## separated_nonempty_list(Pipe,constructor) -> constructor . Pipe separated_nonempty_list(Pipe,constructor) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## constructor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production inter_type -> base_type
## In state 16, spurious reduction of production type_ -> inter_type
## In state 34, spurious reduction of production constructor -> Constructor Of type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Constructor Pipe While
##
## Ends in an error in state: 38.
##
## separated_nonempty_list(Pipe,constructor) -> constructor Pipe . separated_nonempty_list(Pipe,constructor) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## constructor Pipe
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen While
##
## Ends in an error in state: 40.
##
## structure_item -> Type Lparen . separated_nonempty_list(Comma,Type_var) Rparen Ident Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var While
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(Comma,Type_var) -> Type_var . [ Rparen ]
## separated_nonempty_list(Comma,Type_var) -> Type_var . Comma separated_nonempty_list(Comma,Type_var) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var Comma While
##
## Ends in an error in state: 42.
##
## separated_nonempty_list(Comma,Type_var) -> Type_var Comma . separated_nonempty_list(Comma,Type_var) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Type_var Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var Rparen While
##
## Ends in an error in state: 45.
##
## structure_item -> Type Lparen separated_nonempty_list(Comma,Type_var) Rparen . Ident Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Lparen separated_nonempty_list(Comma,Type_var) Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var Rparen Ident While
##
## Ends in an error in state: 46.
##
## structure_item -> Type Lparen separated_nonempty_list(Comma,Type_var) Rparen Ident . Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Lparen separated_nonempty_list(Comma,Type_var) Rparen Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Lparen Type_var Rparen Ident Equal While
##
## Ends in an error in state: 47.
##
## structure_item -> Type Lparen separated_nonempty_list(Comma,Type_var) Rparen Ident Equal . type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Lparen separated_nonempty_list(Comma,Type_var) Rparen Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident While
##
## Ends in an error in state: 49.
##
## structure_item -> Type Ident . Equal type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal While
##
## Ends in an error in state: 50.
##
## structure_item -> Type Ident Equal . type_desc [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Type Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let While
##
## Ends in an error in state: 52.
##
## structure_item -> Let . Ident Equal expression option(DoubleSemicolon) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident While
##
## Ends in an error in state: 53.
##
## structure_item -> Let Ident . Equal expression option(DoubleSemicolon) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Let Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal While
##
## Ends in an error in state: 54.
##
## structure_item -> Let Ident Equal . expression option(DoubleSemicolon) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lparen While
##
## Ends in an error in state: 57.
##
## one_expression -> Lparen . expression Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
## one_expression -> Lparen . expression Comma separated_nonempty_list(Comma,expression) Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident While
##
## Ends in an error in state: 65.
##
## one_expression -> Ident . [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
## one_expression -> Ident . Lparen loption(separated_nonempty_list(Comma,expression)) Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident Lparen While
##
## Ends in an error in state: 66.
##
## one_expression -> Ident Lparen . loption(separated_nonempty_list(Comma,expression)) Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Ident Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Constructor While
##
## Ends in an error in state: 76.
##
## one_expression -> Constructor . expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
## one_expression -> Constructor . [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident Lparen Int While
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(Comma,expression) -> expression . [ Rparen ]
## separated_nonempty_list(Comma,expression) -> expression . Comma separated_nonempty_list(Comma,expression) [ Rparen ]
##
## The known suffix of the stack is as follows:
## expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Ident Lparen Constructor Comma While
##
## Ends in an error in state: 84.
##
## separated_nonempty_list(Comma,expression) -> expression Comma . separated_nonempty_list(Comma,expression) [ Rparen ]
##
## The known suffix of the stack is as follows:
## expression Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lparen Int While
##
## Ends in an error in state: 95.
##
## one_expression -> Lparen expression . Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
## one_expression -> Lparen expression . Comma separated_nonempty_list(Comma,expression) Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Lparen expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lparen Constructor Comma While
##
## Ends in an error in state: 97.
##
## one_expression -> Lparen expression Comma . separated_nonempty_list(Comma,expression) Rparen [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Lparen expression Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic While
##
## Ends in an error in state: 125.
##
## intrinsic_declaration -> Intrinsic . Ident Colon type_ Equal String [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Intrinsic
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon While
##
## Ends in an error in state: 127.
##
## intrinsic_declaration -> Intrinsic Ident Colon . type_ Equal String [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident Colon
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Ident Type
##
## Ends in an error in state: 128.
##
## intrinsic_declaration -> Intrinsic Ident Colon type_ . Equal String [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident Colon type_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production inter_type -> base_type
## In state 16, spurious reduction of production type_ -> inter_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Ident Equal While
##
## Ends in an error in state: 129.
##
## intrinsic_declaration -> Intrinsic Ident Colon type_ Equal . String [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Intrinsic Ident Colon type_ Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Int While
##
## Ends in an error in state: 122.
##
## structure_item -> Let Ident Equal expression . option(DoubleSemicolon) [ Type Let Intrinsic Eof ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Type_var With
##
## Ends in an error in state: 10.
##
## base_type -> Type_var . [ Type Star Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
## base_type -> Type_var . Ident [ Type Star Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
##
## The known suffix of the stack is as follows:
## Type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Intrinsic Ident Colon Ident Star With
##
## Ends in an error in state: 20.
##
## inter_type -> base_type Star . inter_type [ Type Semicolon Rparen Rbrace Pipe Let Intrinsic Equal Eof Arrow ]
##
## The known suffix of the stack is as follows:
## base_type Star
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match With
##
## Ends in an error in state: 56.
##
## one_expression -> Match . expression With option(Pipe) separated_nonempty_list(Pipe,match_case) [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let With
##
## Ends in an error in state: 58.
##
## one_expression -> Let . Ident Equal expression In expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident With
##
## Ends in an error in state: 59.
##
## one_expression -> Let Ident . Equal expression In expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Let Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident Equal With
##
## Ends in an error in state: 60.
##
## one_expression -> Let Ident Equal . expression In expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace With
##
## Ends in an error in state: 61.
##
## one_expression -> Lbrace . separated_nonempty_list(Comma,expr_record_field) Rbrace [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Lbrace
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident With
##
## Ends in an error in state: 62.
##
## expr_record_field -> Ident . Equal expression [ Rbrace Comma ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident Equal With
##
## Ends in an error in state: 63.
##
## expr_record_field -> Ident Equal . expression [ Rbrace Comma ]
##
## The known suffix of the stack is as follows:
## Ident Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Lbrace Ident Equal Int While
##
## Ends in an error in state: 89.
##
## separated_nonempty_list(Comma,expr_record_field) -> expr_record_field . [ Rbrace ]
## separated_nonempty_list(Comma,expr_record_field) -> expr_record_field . Comma separated_nonempty_list(Comma,expr_record_field) [ Rbrace ]
##
## The known suffix of the stack is as follows:
## expr_record_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident Equal Int While
##
## Ends in an error in state: 92.
##
## one_expression -> Let Ident Equal expression . In expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Let Ident Equal Constructor In With
##
## Ends in an error in state: 93.
##
## one_expression -> Let Ident Equal expression In . expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Let Ident Equal expression In
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Int While
##
## Ends in an error in state: 100.
##
## one_expression -> Match expression . With option(Pipe) separated_nonempty_list(Pipe,match_case) [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Match expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With With
##
## Ends in an error in state: 101.
##
## one_expression -> Match expression With . option(Pipe) separated_nonempty_list(Pipe,match_case) [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Match expression With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Pipe With
##
## Ends in an error in state: 102.
##
## one_expression -> Match expression With option(Pipe) . separated_nonempty_list(Pipe,match_case) [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Match expression With option(Pipe)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen With
##
## Ends in an error in state: 103.
##
## pattern -> Lparen . pattern Rparen [ Rparen Comma Arrow ]
## pattern -> Lparen . pattern Comma separated_nonempty_list(Comma,pattern) Rparen [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor With
##
## Ends in an error in state: 105.
##
## pattern -> Constructor . pattern [ Rparen Comma Arrow ]
## pattern -> Constructor . [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Ident With
##
## Ends in an error in state: 107.
##
## pattern -> Lparen pattern . Rparen [ Rparen Comma Arrow ]
## pattern -> Lparen pattern . Comma separated_nonempty_list(Comma,pattern) Rparen [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Constructor Comma With
##
## Ends in an error in state: 109.
##
## pattern -> Lparen pattern Comma . separated_nonempty_list(Comma,pattern) Rparen [ Rparen Comma Arrow ]
##
## The known suffix of the stack is as follows:
## Lparen pattern Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Constructor Comma Ident With
##
## Ends in an error in state: 112.
##
## separated_nonempty_list(Comma,pattern) -> pattern . [ Rparen ]
## separated_nonempty_list(Comma,pattern) -> pattern . Comma separated_nonempty_list(Comma,pattern) [ Rparen ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Lparen Constructor Comma Constructor Comma With
##
## Ends in an error in state: 113.
##
## separated_nonempty_list(Comma,pattern) -> pattern Comma . separated_nonempty_list(Comma,pattern) [ Rparen ]
##
## The known suffix of the stack is as follows:
## pattern Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Ident With
##
## Ends in an error in state: 116.
##
## match_case -> pattern . Arrow expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor Arrow With
##
## Ends in an error in state: 117.
##
## match_case -> pattern Arrow . expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## pattern Arrow
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor Arrow Int While
##
## Ends in an error in state: 119.
##
## separated_nonempty_list(Pipe,match_case) -> match_case . [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
## separated_nonempty_list(Pipe,match_case) -> match_case . Pipe separated_nonempty_list(Pipe,match_case) [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## match_case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Match Constructor With Constructor Arrow Constructor Pipe With
##
## Ends in an error in state: 120.
##
## separated_nonempty_list(Pipe,match_case) -> match_case Pipe . separated_nonempty_list(Pipe,match_case) [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## match_case Pipe
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun With
##
## Ends in an error in state: 67.
##
## one_expression -> Fun . Lparen loption(separated_nonempty_list(Comma,ident)) Rparen Arrow expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Fun
##

Expected `(` after `fun` in function definition.

program: Let Ident Equal Fun Lparen With
##
## Ends in an error in state: 68.
##
## one_expression -> Fun Lparen . loption(separated_nonempty_list(Comma,ident)) Rparen Arrow expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Fun Lparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Ident With
##
## Ends in an error in state: 69.
##
## separated_nonempty_list(Comma,ident) -> Ident . [ Rparen ]
## separated_nonempty_list(Comma,ident) -> Ident . Comma separated_nonempty_list(Comma,ident) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Ident Comma With
##
## Ends in an error in state: 70.
##
## separated_nonempty_list(Comma,ident) -> Ident Comma . separated_nonempty_list(Comma,ident) [ Rparen ]
##
## The known suffix of the stack is as follows:
## Ident Comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Rparen With
##
## Ends in an error in state: 74.
##
## one_expression -> Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen . Arrow expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Let Ident Equal Fun Lparen Rparen Arrow With
##
## Ends in an error in state: 75.
##
## one_expression -> Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen Arrow . expression [ With Type Rparen Rbrace Pipe Let Intrinsic In Eof DoubleSemicolon Comma ]
##
## The known suffix of the stack is as follows:
## Fun Lparen loption(separated_nonempty_list(Comma,ident)) Rparen Arrow
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: Type Ident Equal Ident With
##
## Ends in an error in state: 131.
##
## list(structure_item) -> structure_item . list(structure_item) [ Eof ]
##
## The known suffix of the stack is as follows:
## structure_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>
